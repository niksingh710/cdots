# shellcheck disable=SC2139

check() { # shell fn to return true if command exists
  command -v "$1" &>/dev/null
}

# idiot fix
alias mkdir='printf "\033[1;33m" && mkdir -p -v'
alias rm='printf "\033[1;31m" && rm -rIv'
alias rrm='printf "\033[1;31m" && $rootmgr rm -rIv'
alias grep="grep --color=auto"
alias claer="clear"
alias celar="clear"

rootmgr="${ROOTMGR:-sudo}" # variable to be used instead of sudo (good to manage if using `doas` or `sudo`)
shell="$(basename "$(realpath /proc/$$/exe)")"
# This can resoulve to bash, zsh, fish, etc
alias shell="exec $shell"

# Languages or programming related
check python3 && alias python="python3"
check pip3 && alias pip="pip3"

check pnpm && alias pnpm="npm"

check go && {
  alias gomi="go mod init \$(basename \$(pwd)) && go mod tidy"
}

check sshd && {
  alias ssh-list="ssh | grep -i ssh"
  alias ssh-status="$rootmgr systemctl status sshd"
  alias ssh-start="$rootmgr systemctl start sshd"
  alias ssh-stop="$rootmgr systemctl stop sshd"
  alias ssh-restart="$rootmgr systemctl restart sshd"
  alias ssh-terminate="pkill -o -u $USER sshd"
}

check mysql && {
  alias mysql-start='$rootmgr systemctl start mysql'
  alias mysql-status='$rootmgr systemctl status mysql'
  alias mysql-stop='$rootmgr systemctl stop mysql'
  alias sql='mysql-start && mysql -u "$USER" -p && mysql-stop'

  check mycli && {
    alias sql='mysql-start && mycli -u "$USER" && mysql-stop'
  }
}

check vimiv && alias vimg="setsid vimiv ./*/**/* &>/dev/null"
check adb && alias adb-power="adb shell input keyevent 26"

# Arch specific
check pacman && {
  pkmgr="$rootmgr pacman"
  hash paru 2>/dev/null && pkmgr=paru
  hash yay 2>/dev/null && pkmgr=yay

  update() {
    if [[ $1 == "--sync" ]]; then
      $pkmgr -Sy && pkill -SIGRTMIN+8 waybar
      return
    elif [[ $1 == "-f" ]]; then
      yes | $pkmgr -Syu && pkill -SIGRTMIN+8 waybar
      return
    else
      $pkmgr -Syu && pkill -SIGRTMIN+8 waybar
    fi
  }
  clean() {
    toclean=($($pkmgr -Qtdq))
    [[ ${#toclean} == 0 ]] && return
    $pkmgr -Rns $toclean
    clean
  }

  alias udpate="update"
  alias in="$pkmgr -S --needed"
  alias un="$pkmgr -Rns"
}

# General
alias c="clear"

check unimatrix && alias matrix="unimatrix -f -l ocCgGkS -s 96"
check systemctl && alias service="$rootmgr systemctl"
check advcp && alias cp="advcp -giaR"
check advmv && alias mv="advmv -gi"

check wl-paste && alias paste="wl-paste"
check wl-copy && alias copy="wl-copy"
check figlet && alias stime="watch -n1 -t 'date +%T | figlet'"
check center-align && {
  check figlet && {
    alias stime='watch -n1 -t "date +%A%n%x%n%X | figlet  | center-align -a"'
  }
}

check fastfetch && {
  if test -f "$HOME/.config/fastfetch/config.jsonc"; then
    alias fastfetch="fastfetch --config ~/.config/fastfetch/config.jsonc"
  fi
}

check radeontop && alias radeontop="radeontop -Tc"

check glow && alias mcat="glow"
check sl && alias sl="sl -e"
check tldr && alias eman="tldr"
check sensors && alias wsensors="watch -n1 -t 'sensors'"
check sudo && alias sudo="sudo "
check doas && alias doas="doas "

check trash && alias rm='echo "Fuck Off"; false'

check basic-battery-stat && alias battery='basic-battery-stat'

[ -d "/run/media/$USER/HDD" ] && alias cdh="cd /run/media/$USER/HDD"

check zoxide && {
  # Overriding this coz of tab completions
  eval "$(zoxide init "$shell" --cmd cd)"
  unalias cd &>/dev/null
  function cd() {
    __zoxide_z "$@"
  }
}

alias rcp="$rootmgr cp"
alias rmv="$rootmgr mv"
alias e="$EDITOR"

alias font-family="fc-list : family | fzf | sed -z 's/\n//g'"

check doasedit && alias ee="doasedit"
check sudoedit && alias ee="sudoedit"

check xdg-open && alias open="setsid xdg-open $* &>/dev/null"

# UI
check bat && {
  export BAT_THEME="TwoDark"
  cat() {
    local paged=false
    local batarg=("--tabs" "2")
    local arg
    for arg in "$@"; do
      case "$arg" in
      -p) paged=true ;;
      *) batarg+=("$arg") ;;
      esac
    done

    if ! "$paged"; then
      batarg+=(-pp)
    fi

    bat "${batarg[@]}"
    return $?
  }
  alias bcat="bat -l bash"
  alias dcat="bat --decorations=always"
  help() {
    "$@" --help 2>&1 | bat --plain --language=help
  }
}

check lsd && {
  alias ls='lsd --sort=time'
  alias la='ls -a'
  alias ll='ls -l'
  alias lla='ls -la'
  alias lat='ls -a --tree'
  alias lt='ls --tree'
}

check nvim && alias ncal="nvim -c ':Calendar'"
check neovide && alias eu="neovide"
check mumble && {
  alias mumble-start='$rootmgr systemctl start mumble-server'
  alias mumble-status='$rootmgr systemctl status mumble-server'
  alias mumble-stop='$rootmgr systemctl stop mumble-server'
}

check dragon-drop && alias dnd="setsid dragon-drop $@ &>/dev/null"

check waydroid && {

  waydroid-start() {
    check waydroid-gpu.sh || {
      echo "waydroid-gpu.sh not found"
    }
    echo 1 | $rootmgr "$HOME/bin/waydroid-gpu.sh" &>/dev/null
    $rootmgr systemctl start waydroid-container
    $rootmgr systemctl restart iptables
    setsid waydroid show-full-ui &>/dev/null
  }

  alias waydroid-status='$rootmgr systemctl status waydroid-container'
  alias waydroid-stop='$rootmgr waydroid container stop;$rootmgr systemctl stop waydroid-container'
}

check rclone && {
  alias rclone-locked="RCLONE_CONFIG=/home/$(whoami)/.config/rclone/rclone-locked.conf rclone"
  alias rclonecp="rclone copy --progress"
}

# TODO: needs cleanup
check git && {
  export GIT_EDITOR=$EDITOR
  alias gc="git clone"
  git-regular() {
    DIRLOC="$HOME/repos"
    do-git() {
      echo "[+] Adding all file changes."
      git add .
      echo "[+] Commiting all file changes."
      git commit -m "Regular update" && {
        echo "[+] Pushing changes."
        git push
      }
    }
    if [ -d "$DIRLOC/cli" ]; then
      builtin cd "$DIRLOC/cli"
      echo "============ CLI CONFIGURATION ============"
      do-git
      echo ""
    else
      echo "[!] Cli dir not found Skipping it"
    fi
    if [ -d "$DIRLOC/gui-configuration" ]; then
      builtin cd "$DIRLOC/gui-configuration"
      echo "============ GUI CONFIGURATION ============"
      do-git
    else
      echo "[!] Gui dir not found Skipping it"
    fi
    if [ -d "$HOME/.config/nvim" ]; then
      builtin cd "$HOME/.config/nvim"
      echo "============ Nvim CONFIGURATION ============"
      do-git
    else
      echo "[!] Nvim dir not found Skipping it"
    fi

  }
}

d() {
  # shellcheck disable=SC2086
  # shellcheck disable=SC2048
  setsid $* &>/dev/null
}

cpu() {
  # for my arch based system
  # simple cpu function
  [ $# -eq 0 ] && {
    watch -n1 -t "grep \"^[c]pu MHz\" /proc/cpuinfo"
    return
  }
  [ "$1" = "governer" ] && {
    cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
    return
  }
  [ "$1" = "turbo" ] && {
    [ -f /sys/devices/system/cpu/intel_pstate/no_turbo ] || {
      echo "Check if intel pstate drivers are in use."
      return
    }
    [ "$(cat /sys/devices/system/cpu/intel_pstate/no_turbo)" = 0 ] && echo "Turbo: On" || echo "Turbo: Off"
    return
  }
  [ "$1" = "temp" ] && {
    check sensors || {
      echo "lm-sensors is not installed"
      return
    }
    watch -n1 -t sensors coretemp-isa-0000
    return
  }
}

getline() {
  # This function will extract any line from a file when get piped
  [ $# -eq 1 ] || return
  sum=""
  while read -r data; do
    sum+="$data\n"
  done
  echo "$sum" | head -n "$1" | tail -n 1
}

lsbin() {
  # This lists all binaries available to system path

  # shellcheck disable=SC2086
  # shellcheck disable=SC2207
  plist=($(echo $PATH | tr ":" "\n"))
  for i in "${plist[@]}"; do
    /usr/bin/ls -1 "$i"
  done
}

recent() {
  \ls -t | head -n1
}

disks() {
  echo "╓───── m o u n t . p o i n t s"
  echo "╙────────────────────────────────────── ─ ─ "
  lsblk -a
  echo ""
  echo "╓───── d i s k . u s a g e"
  echo "╙────────────────────────────────────── ─ ─ "
  df -h
  echo ""
  echo "╓───── U.U.I.D.s"
  echo "╙────────────────────────────────────── ─ ─ "
  lsblk -f
}

#Transfer/share any file 5GB limit | Usage: transfer ~/foo/bar
transfer() {
  if [ $# -eq 0 ]; then
    printf "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
    return 1
  fi
  tmpfile=$(mktemp -t transferXXX)
  if tty -s; then
    basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
    curl -i --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >>"$tmpfile"
  else curl -i --progress-bar --upload-file "-" "https://transfer.sh/$1" >>"$tmpfile"; fi
  cat "$tmpfile"
  check wl-copy && wl-copy <"$tmpfile"
  rm -f "$tmpfile"
}

check yt-dlp && {
  ytdownload() {
    [ -z "$1" ] && {
      echo "Give a url"
      return 1
    }
    yt-dlp -f "bv*+ba/b" --embed-thumbnail --add-metadata --output "%(playlist_index)s - %(title)s.%(ext)s" "$1"
  }
}

if check foot && check cava; then
  alias clean-cava='setsid foot -o colors.alpha=0 -a "foot-cava" sh -c "cava" &>/dev/null'
fi

check archwiki-offline && {
  _temp_file="$(mktemp -q)"
  cat <<EOF >"$_temp_file"
#!/bin/bash
# Replace spaces with underscores
selected_topic=\$(echo "\$1" | sed 's/ /_/g')

# Open the HTML file using w3m for preview
w3m /usr/share/doc/arch-wiki/html/en/\$selected_topic.html
EOF
  chmod +x "$_temp_file"

  _cmd="rofi -dmenu -i -p 'ArchWiki'"
  opener="firefox -new-window"
  check fzf && _cmd="fzf"
  check w3m && _cmd="fzf --preview=\"$_temp_file {}\""
  alias archwiki="archwiki-offline -d -o '$opener' -m '$_cmd'"
}

myip() {
  if [ "$1" = "-g" ]; then
    check curl && curl -s http://ipecho.net/plain
    echo
  else
    check ip && echo -e "$(ip route get 1.2.3.4 | awk '{print $7}' | sed -z 's/\n/ /g')"
  fi
}

# vim: ft=sh
